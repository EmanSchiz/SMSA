# -*- coding: utf-8 -*-
"""core_functions

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ra5yZrG5rHhmbBn5Vgd6a2t5urITSzuT
"""

!pip install transformers tweepy pandas matplotlib seaborn streamlit
from transformers import pipeline
import tweepy
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Twitter API credentials
BEARER_TOKEN = "AAAAAAAAAAAAAAAAAAAAAOVgxAEAAAAAgv9p%2F7mxuSraiYZJ7m1E%2BGRFpmk%3DcMWRGfJGcBCrJlBMnCekcLAgsOSkfj8ELkEaVx7lERBiN9cMTK"

# Set up Tweepy client
client = tweepy.Client(bearer_token=BEARER_TOKEN)

# Function to fetch tweets
def fetch_tweets(keyword, count=50):
    try:
        tweets = client.search_recent_tweets(query=keyword, max_results=count)
        if tweets.data:
            data = [{"text": tweet.text} for tweet in tweets.data]
            return pd.DataFrame(data)
        else:
            return pd.DataFrame(columns=["text"])
    except Exception as e:
        print(f"Error fetching tweets: {e}")
        return pd.DataFrame(columns=["text"])
tweets_df = fetch_tweets("AI", count=10)
print(tweets_df)
# Load the sentiment analysis pipeline
sentiment_analyzer = pipeline("sentiment-analysis")

# Function to analyze sentiments
def analyze_sentiments(dataframe):
    sentiments = []
    for text in dataframe["text"]:
        result = sentiment_analyzer(text)[0]
        sentiments.append(result["label"])
    dataframe["sentiment"] = sentiments
    return dataframe
if not tweets_df.empty:
    tweets_df = analyze_sentiments(tweets_df)
    print(tweets_df.head())
def visualize_sentiments(dataframe):
    if "sentiment" in dataframe.columns and not dataframe.empty:
        sentiment_counts = dataframe["sentiment"].value_counts()
        sns.barplot(x=sentiment_counts.index, y=sentiment_counts.values, palette="viridis")
        plt.title("Sentiment Analysis Results")
        plt.xlabel("Sentiment")
        plt.ylabel("Count")
        plt.show()
    else:
        print("No data to visualize.")

# Visualize the analyzed sentiments
visualize_sentiments(tweets_df)